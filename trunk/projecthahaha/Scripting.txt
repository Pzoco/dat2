abstract class Behaviour
{
	Regiment _regiment;
	AggressiveBehaviour(Regiment regiment)
	{
		_regiment = regiment;
	}
	
	abstract PerformAction()
	{
	}

}

class AggressiveBehaviouir:Behaviour
{
	
	AggressiveBehaviour(Regiment regiment):base(regiment)
	{
	}
	
	override PerformAction()
	{
		int x = _regiment.x;
		int y = _regiment.y;
		if(newGrid[x][y+1] == false)
		{
			Move(_regiment,x,y+1);
		}
	}
}


class Regiment
{
	string _name = "";
	int _attackPower;
	int _defensePower;
	int _hp;
	int _team;
	AggressiveBehaviour _behaviour;
	Position _position = new Position(x,y);
	
	Regiment(string name,Position position,int attackPower, int defensePower, int hp,Behaviour behaviour, int team)
	{
		_name = name;
		_position = position;
		_attackPower = attackPower;
		_defensePower = defensePower;
		_hp = hp;
		_behaviour = behaviour;
		_team = team;
	}
	
	BeginTurn()
	{
		_behaviour.PerformAction();
	}
}

Move(Regiment regiment, int x, int y)
{
	regiment.position(regiment.position.X+=x,regiment.position.Y+=y);
}

Attack(Regiment attacker,Regiment defender)
{
	defender.hp -= attacker.attack;
}


class Position
{
	int _x;
	int _y;
	Postion(int x, int y)
	{
		_x = x;
		_y = y;
	}
}

class Grid
{
	bool[][] map;
	int _sizeX;
	int _sizeY;
	Grid(int sizeX,int sizeY)
	{
		_sizeX = sizeX;
		_sizeY = sizeY;
		map = new bool[sizeX][sizeY];
		
		for(int x = 0;x<sizeX;x++)
		{
			for(int y = 0;y<sizeY;y++)
			{
				map[x][y] = 0;
			}
		}
	}
}

Main()
{
	static Grid newGrid = new Grid(20,20);
	bool battleEnded = 0;
	Regiment reg1 = new Regiment("Ninjas",new Position(0,0),11, 33, 100,new AggressiveBehaviour(),0);
	Regiment reg2 = new Regiment("Pirates",new Position(5,5),11, 2, 122,new AggressiveBehaviour(),1);
	
	while(!batteEnded)
	{
		reg1.BeginTurn();
		reg2.BeginTurn();
		if(reg1.hp <=0 || reg2.hp <= 0){battleEnded =1;}
		
	}
}